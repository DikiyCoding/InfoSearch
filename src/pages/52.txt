Функциональное программирование – От Lisp до Haskell / Хабр Все сервисы Хабра 49,07 Рейтинг Функциональное программирование От Lisp до Haskell вчера в 17:19 , В интересное время мы живем, товарищи! В любой публичной деятельности теперь требуется проявлять изрядную креативность, чтобы обойти все ловушки, лишь бы не задеть случайно кого-нибудь неосторожным словом. То же слово "товарищ" за свою долгую жизнь претерпело несколько смысловых изменений. Изначально товарищи - "торгующие одним товаром". Затем, уже шире, "занимающихся одним делом". Далее, когда дело в СССР осталось одно на всех - построение коммунизма - "товарищи" стало вообще универсальным обращением, но в конце концов сдулось до узкого применения в войсках. А ведь теперь кто-то на "товарища" может и оскорбиться. Например, гусь на свинью - однозначно. Так что заранее прошу уязвимых не спускаться под кат. Потому что речь пойдет про систему . +9 5 2,5k 1 февраля 2021 в 13:07 3 ноября 2020 в 18:07 15 июля 2020 в 11:12 4 июля 2020 в 15:54 15 февраля 2020 в 19:52 8 августа 2019 в 10:08 вчера в 19:11 вчера в 12:11 вчера в 10:32 вчера в 10:31 Показать ещё 8 апреля 2021 в 18:31 , Tutorial После прохождения курса по Haskell решил закрепить знания первым проектом. Писать будем змейку для терминала. Чтобы придать игре уникальности, добавим бота, который сам будет проходить игру. +12 22 3k 29 марта 2021 в 16:54 , , , , Tutorial . Всем привет! Продолжаем серию туториалов по разработке веб-приложения на Reflex. В этой части мы добавим возможность выполнять различные манипуляции со списком задач. +9 23 1,2k 24 марта 2021 в 19:10 , , Предыдущие статьи цикла: В предыдущей статье мы рассмотрели типы Option и Either, которые предоставляют функциональную замену nullable-типам и выбрасыванию исключений. В этой статье я хочу поговорить о ленивой функциональной замене промисам — задачам (tasks). Они позволят нам подойти к понятию систем эффектов, которые я подробно рассмотрю в следующих статьях. Как всегда, я буду иллюстрировать примеры с помощью структур данных из библиотеки . +23 80 6,1k Минуточку внимания 19 марта 2021 в 09:59 , , , , Привет, меня зовут Григорий Бизюкин, я преподаватель и фронтенд-разработчик в Яндексе. Давайте поговорим о функциональном программировании в мире JavaScript. Мы все про ФП что-то слышали, нам всем оно интересно, но у меня, когда я искал полезные материалы для подготовки к лекциям, сложилось такое впечатление: есть куча статей, каждая из которых либо говорит об ФП общими словами, либо раскрывает отдельный маленький кусочек темы, чего, конечно, недостаточно. Добавим функционального света Впервые я попробовал обобщить в одном месте самые популярные и, как мне кажется, применимые приёмы функционального программирования в лекции для ШРИ. Потом захотелось расширить материал и рассмотреть ещё больше концепций. В результате получилась эта статья. В ней мы разберём всё самое сложное простым языком с понятными примерами. Надеюсь, вам будет интересно! +31 236 14k 17 марта 2021 в 15:27 , , , , У функционального программирования есть одна большая проблема — о нем очень непросто рассказывать. Попытки донести людям что-то с использованием терминов типа «» легко сводят неподготовленного слушателя с ума. — автор популярной книги , автор . На 2017 Moscow Марк рассмотрел применение dependency injection в классическом объектно-ориентированном дизайне и объяснил, почему его необязательно (даже нежелательно) использовать в функциональном программировании. Следом за этим он наглядно показал, как использование приемов функционального программирования устраняет необходимость в использовании моков и стабов в модульном тестировании и позволяет полностью выбросить мусор из прямого перечисления зависимостей. Под катом — перевод доклада и видео. Далее повествование будет от лица Марка. +35 92 10k 16 марта 2021 в 14:11 , , , , IT-мероприятия сейчас проходят в окне браузера. Вот и бесплатный фестиваль TechTrain пройдёт 27 марта в онлайне. Как и на двух предыдущих TechTrain, там будет несколько докладов для IT-специалистов самого разного профиля. Описание программы — под катом, а если вы уже готовы оформлять бесплатный билет, можете переходить . А ещё делимся с записями предыдущего TechTrain — можете по ним лучше понять, чего ждать от следующего. +22 9 2k AdBlock похитил этот баннер, но баннеры не зубы — отрастут 15 марта 2021 в 20:34 , Языки Ocaml и Haskell ведут родословную из языка ISWIM, описанного в знаменитой статье Питера Лендина "The next 700 programming languages". В ней автор, отталкиваясь от языка LISP, создаёт новый язык программирования и, в частности, вводит ключевые слова let, and и where, которые широко используются в языках семейства ML. Рано или поздно у всякого пытливого ума, занимающегося функциональным программированием возникает вопрос: почему в Ocaml не прижилось ключевое слово where, широко используемое в Haskell? С моей точки зрения, это, в основном, обусловлено различиями в семантике этих языков, а именно императивно-энергичным характером Ocaml и чистотой-ленивостью вычислений в Haskell (которые непосредственно и жёстко связаны с impure/pure характерами этих языков). +16 15 1,2k 15 марта 2021 в 14:21 , Перевод Эта статья - часть серии статей "Составляя ПО" про функциональное программирование и различные техники создания программ на JavaScript ES6+, начиная с азов. Оставайтесь на связи, много нового впереди! Композиция: "Действие, заключающееся в составлении единого целого из частей или элементов." В первом уроке программирования в старших классах в школе мне сказали, что разработка ПО это "разбиение сложных задач на составляющие их части, а затем объединение простых решений в сложные для решения исходной задачи". Я больше всего в своей жизни сожалею о том, что не понял всей важности этого урока в самом начале. Суть разработки ПО стала мне понятна слишком поздно. +9 28 1,8k 5 марта 2021 в 11:15 , , , Перевод Сегодня я собираюсь обсудить абсолютно новую для многих пользователей (особенно для питонистов) идею: интеграцию тестов в ваше приложение. Итак, давайте начнем. +5 28 2,3k 2 марта 2021 в 16:48 , , , , Введение В этой статье мы поговорим о двух принципиально разных подходах к реактивному программированию. Elm, в отличие от Reflex — это целый язык, а не библиотека, поэтому сравнивать их не очень корректно. Тем не менее, можно показать разницу между подходами, а также рассказать, какие практические трудности могут возникнуть при разработке с использованием каждой из технологий. +17 14 1,8k 28 февраля 2021 в 16:09 , , Предыдущие статьи цикла: В предыдущей статье мы рассмотрели понятие класса типов (type class) и бегло познакомились с классами типов «функтор», «монада», «моноид». В этой статье я обещал подойти к идее алгебраических эффектов, но решил всё-таки написать про работу с nullable-типами и исключительными ситуациями, чтобы дальнейшее изложение было понятнее, когда мы перейдем к работе с задачами (tasks) и эффектами. Поэтому в этой статье, всё еще рассчитанной на начинающих ФП-разработчиков, я хочу поговорить о функциональном подходе к решению некоторых прикладных проблем, с которыми приходится иметь дело каждый день. Как всегда, я буду иллюстрировать примеры с помощью структур данных из библиотеки . +20 79 6,1k 24 февраля 2021 в 18:53 , , , , Tutorial Введение Всем привет! Меня зовут Никита, и мы в Typeable для разработки фронтенда для части проектов используем FRP-подход, а конкретно его реализацию на Haskell – веб-фреймоворк . На русскоязычных ресурсах отсутствуют какие-либо руководства по данному фреймворку (да и в англоязычном интернете их не так много), и мы решили это немного исправить. В этой серии статей будет рассмотрено создание веб-приложения на Haskell с использованием платформы . предоставляет пакеты и . Пакет является реализацией на языке Haskell. В библиотеке содержится большое число функций, классов и типов для работы с . Эти пакеты разделены, т.к. FRP-подход можно использовать не только в веб-разработке. Разрабатывать мы будем приложение , которое позволяет выполнять различные манипуляции со списком задач. +15 42 3,4k 16 февраля 2021 в 18:41 , , Перевод Разработчики на Haskell много говорят о типобезопасности (type safety). Сообщество Haskell-разработчиков отстаивает идеи «описания инвариант на уровне системы типов» и «исключения недопустимых состояний». Звучит как вдохновляющая цель! Однако не совсем понятно, как ее достичь. Почти год назад я опубликовала статью — первый шаг к восполнению этого пробела. За статьей последовали продуктивные обсуждения, но нам так и не удалось прийти к консенсусу относительно правильного использования конструкции newtype в Haskell. Идея достаточно проста: ключевое слово newtype объявляет wrapper type (тип-обертка), который отличается по имени, но репрезентативно эквивалентен типу, который он обертывает. На первый взгляд, это понятный путь к достижению типобезопасности. Например, рассмотрим, как использовать объявление newtype для определения типа адреса электронной почты: Этот прием предоставляет нам определенное значение, а в сочетании с умным конструктором и границей инкапсуляции даже может обеспечить безопасность. Но это совсем другой вид типобезопасности. Он намного слабее и отличается от того, который я выделила год назад. Сам по себе newtype — это просто псевдоним. Names are not type safety © +7 17 1,7k 15 февраля 2021 в 15:19 , , Привет! Меня зовут Катерина, и я испытываю самые тёплые чувства к функциональному программированию, использую функциональный язык на постоянной основе и даже немного преподаю. Основной язык разработки у нас в Typeable — Haskell, и, пока все спорили о том, готов ли Haskell для продакшена, мы просто его использовали и считали конкурентным преимуществом. Нам хотелось бы поделиться своим мнением, основанным на этом опыте. +22 68 9,3k 3 февраля 2021 в 21:25 , , , Перевод NullPointerException - одна из самых раздражающих вещей в Java мире, которую был призван решить Optional. Нельзя сказать, что проблема полностью ушла, но мы сделали большие шаги. Множество популярных библиотек и фреймворков внедрили Optional в свою экосистему. Например, JPA Specification возвращает Optional вместо null. Я думаю, что некоторые программисты настолько впечатлились теми возможностями, которые предоставляет Optional, что они стали использовать его даже там, где это не нужно, зачастую применяя неправильные паттерны. В этой статье я привел некоторые ошибочные использования этой монады и предложил свой путь для решения возникших проблем. +11 56 6,2k 31 января 2021 в 20:35 , , , По вопросу обработки ошибок уже множество статей написано и все равно возникают вопросы и споры. Я не стану рассматривать все способы и языки, но хотел бы остановится на исключениях в JVM и сравнить их с функциональным подходом (`Try`/`Either`) на примере Scala. Эта статья так же не про сравнение ФП с ООП – совсем не обязательно бросать одно ради другого. Но посмотреть и сравнить всегда полезно. +5 14 3,1k 30 января 2021 в 00:15 , Основы функционального программирования в Kotlin являются очень важной его частью, которую нужно уметь использовать для того, чтобы писать красивый, понятный и поддерживаемый код. Функции высшего порядка, применение ссылок, управление областями видимости за счет встроенных функций и не только с разбором принципа работы и примерами. +8 34 5,5k 28 января 2021 в 17:48 , , Перевод На самом деле ученые всегда стремятся к каким-то достижениям. Они думают только о том, удастся ли это им что-то совершить. И они почему-то никогда не задумываются — а стоит ли вообще совершать это «что-то»? — Ян Малкольм, Парк Юрского Периода Разработка абстракций или библиотек часто выглядит актом чистого, ничем не ограниченного творения: инженер (или логик) создаёт что-то из ничего. Однако, с опытом приходит осознание компромиссов и умение идти на них, например, выбирая между эффективностью, простотой реализации, простотой использования и сложностью выстреливания в ноги. Похоже, никуда не деться и от личных предпочтений: два инженера с одинаковым бекграундом и уровнем, решающие одну и ту же задачу, всё равно придумают два различных интерфейса к одной и той же абстракции. Денотационный дизайн предназначен для формального описания этих предпочтений. Он позволяет посмотреть на эти интерфейсы и определить, являются ли они корректными. Этот очерк — изложение прекрасной статьи от Conal Elliot. +25 39 3,9k 27 января 2021 в 23:39 , , , Всем привет! В этой статье хочу рассказать про метапрограммирование на примере реальной часто встречающейся проблемы. Когда кто то говорит про метапрограммирование у олдскульного кодировщика случается приступ ярости) И на это есть причины так и на большом проекте может показаться безумием использовать метапрограммирование, так как код становится очень сложным для чтения. А если в проект включится специалист со стороны, то он и подавно ничего не разберет в этом мета-коде. Но все не так просто, как говорится - нет плохих инструментов. В этой статьей я постараюсь показать на реальном рабочем примере как метапрограммирование поможет сделать ваш код чище, избавит от рутинных повторений. И заставит порадоваться мета-магии. +3 18 3,5k ← сюда 1 Баннер исчез, но на прощание оставил коллекцию по работе с продуктами от Microsoft Вклад авторов Читают сейчас 17,5k 5,3k 11,2k 14,4k 2,5k 1124k Мегапост Пока никто не указал причину минусов Причины минусов Самое читаемое +49 17,5k 53 +111 71k 65 +52 14,4k 58 +20 14,2k 2 Подборка +218 104k 83 +111 71k 65 +45 66,6k 144 +62 36,6k 58 Мегапост +231 252k 446 +56 213k 112 +592 209k 505 +62 174k 111 Мегапост Минуточку внимания Ваш аккаунт Разделы Информация Услуги © 2006 – 2021 «» Настройка языка Интерфейс Русский English Язык публикаций Русский Английский Сохранить настройки